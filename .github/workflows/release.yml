name: release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

jobs:
  build-and-release:
    name: Build and publish Playnite 10 .pext
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.x'

      - name: Restore
        run: dotnet restore src/SteamShortcutsImporter/SteamShortcutsImporter.csproj
      - name: Build
        run: dotnet build src/SteamShortcutsImporter/SteamShortcutsImporter.csproj -c Release

      - name: Stage files for Toolbox pack
        shell: pwsh
        run: |
          $outDir = "src/SteamShortcutsImporter/bin/Release/net462"
          $manifest = "src/SteamShortcutsImporter/extension.yaml"
          $icon = "src/SteamShortcutsImporter/icon.png"
          if (!(Test-Path $outDir)) { throw "Build output not found: $outDir" }
          Copy-Item $manifest $outDir -Force
          if (Test-Path $icon) { Copy-Item $icon $outDir -Force }

      - name: Download Playnite Portable (Toolbox)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $zipPath = "$env:RUNNER_TEMP\Playnite.zip"
          $dest = "$env:RUNNER_TEMP\Playnite"
          $headers = @{ 'Accept' = 'application/vnd.github+json' }
          if ($env:GITHUB_TOKEN) { $headers['Authorization'] = "Bearer $env:GITHUB_TOKEN" }
          $rel = Invoke-RestMethod -Headers $headers -Uri "https://api.github.com/repos/JosefNemec/Playnite/releases/latest"
          $asset = $rel.assets | Where-Object { $_.name -like 'Playnite-*.zip' } | Select-Object -First 1
          if (-not $asset) { throw "Could not find Playnite portable zip asset in latest release." }
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $zipPath
          if (Test-Path $dest) { Remove-Item $dest -Recurse -Force }
          Expand-Archive -Path $zipPath -DestinationPath $dest -Force
          "TOOLBOX_PATH=$dest\Toolbox.exe" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Pack with Toolbox
        shell: pwsh
        run: |
          $toolbox = $env:TOOLBOX_PATH
          if (!(Test-Path $toolbox)) { throw "Toolbox.exe not found at $toolbox" }
          $src = Resolve-Path "src/SteamShortcutsImporter/bin/Release/net462"
          if (Test-Path "SteamShortcutsImporter.pext") { Remove-Item "SteamShortcutsImporter.pext" -Force }
          & $toolbox pack $src . | Write-Host

      - name: Rename artifact with tag
        shell: pwsh
        run: |
          $tag = "$env:GITHUB_REF_NAME"
          if ([string]::IsNullOrEmpty($tag)) { $tag = "dev" }
          Rename-Item -Path "SteamShortcutsImporter.pext" -NewName "SteamShortcutsImporter-$tag.pext"

      - name: Verify addon manifest (optional)
        shell: pwsh
        run: |
          $toolbox = $env:TOOLBOX_PATH
          if (Test-Path ".\addon.yaml") {
            & $toolbox verify addon ".\addon.yaml" | Write-Host
          } else {
            Write-Host "No addon.yaml found, skipping verify."
          }

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            SteamShortcutsImporter-*.pext
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
